{"version":3,"sources":["components/header/Header.jsx","components/footer/Footer.jsx","components/helperfunctions/HelperFunctions.jsx","components/helperfunctions/DrawLine.jsx","components/modelvizview/configview/ConfigView.jsx","components/modelvizview/neuronview/NeuronView.jsx","components/modelvizview/ModelViz.jsx","components/Main.js","serviceWorker.js","index.js"],"names":["Header","className","aria-label","href","process","src","alt","exact","to","Footer","style","zIndex","target","Component","intlFormat","num","Intl","NumberFormat","format","Math","round","makeFriendly","abs","getElement","id","document","getElementById","checkInView","container","element","partial","containerOffset","elementOffset","cTop","scrollTop","cBottom","clientHeight","eTop","offsetTop","eBottom","ReactGA","initialize","window","LeaderLine","animOptions","duration","timing","drawArcLines","model","layer","layers","lineHolder","layerBox","modelBox","modelVisible","lineParams","i","currentLayerBox","isPrima","String","push","startElement","endElement","color","endSocket","endPlugSize","size","entries","param","line","startPlug","endPlug","startPlugColor","path","hide","startSocket","show","index","drawLines","ConfigView","props","selections","config","models","getter","selectedModel","selectedLayerIndex","selectedLayer","length","useRef","isScrolling","selectedModelRef","selectedLayerRef","laysersRef","removeLines","current","forEach","each","remove","useEffect","setter","scrollEndedHandler","clearTimeout","setTimeout","addEventListener","selectedLayerBox","scrollTo","top","left","behavior","removeEventListener","advancedDrawer","modelImageList","map","mdata","value","maxLength","imagePath","basePath","name","toUpperCase","substring","onClick","indexvalue","layerImageList","ldata","layer_index","modelparameters","advanced","numlayers","Tooltip","direction","triggerText","type","NeuronView","neurons","neuronImagelIst","data","selectedNeuron","mainImagePath","mainImage","ModelViz","title","rel","history","createBrowserHistory","basename","forceRefresh","keyLength","getUserConfirmation","message","callback","confirm","listen","location","linkHolder","updateLh","hash","Main","modelDetails","require","neuronDetails","useState","setSelectedModel","setSelectedLayer","setSelectedNeuron","showAdvanced","setShowAdvanced","similarDrawer","setSimilarDrawer","setAdvancedDrawer","render","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":";y+rmBAae,SAASA,IAGtB,OACE,gCACE,qBAAKC,UAAU,aAAaC,aAHT,gBAGnB,SACE,qBAAKD,UAAU,uCAAf,SACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,uCAAf,SACE,mBAAGE,KAAMC,kBAAT,SACE,qBACEH,UAAU,aACVI,IAAI,kBACJC,IAAI,sBAIV,qBAAKL,UAAU,8CAAf,SACE,sBAAKA,UAAU,kCAAf,cAjBI,gBAiBJ,SAEF,qBAAKA,UAAU,8CAAf,SACE,cAAC,IAAD,CAASM,OAAK,EAACC,GAAG,IAAlB,0CAiBR,wBACA,qBAAKP,UAAU,cAAf,kB,oCC1BSQ,G,6KAZX,OACE,sBAAKC,MAAO,CAAEC,OAAQ,OAAUV,UAAU,kBAA1C,uBACY,sBAAMA,UAAU,WAAhB,oBADZ,MACyD,IACvD,mBAAGE,KAAK,0CAA0CS,OAAO,QAAzD,wCAFF,W,GAHeC,c,8BC6BrB,SAASC,EAAWC,GAClB,OAAO,IAAIC,KAAKC,cAAeC,OAAOC,KAAKC,MAAY,GAANL,GAAY,IAExD,SAASM,EAAaN,GAC3B,OAAIA,EAAM,GAAKA,EAAM,EACZA,EAELI,KAAKG,IAAIP,IAAQ,IAAgBD,EAAWC,EAAM,KAAW,IAC7DI,KAAKG,IAAIP,IAAQ,IAAaD,EAAWC,EAAM,KAAQ,IACpDD,EAAWC,GA8Fb,SAASQ,EAAWC,GACzB,OAAOC,SAASC,eAAeF,GAoC1B,SAASG,EACdC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAIJ,EAAW,CAEb,IAAIK,EAAOL,EAAUM,UACjBC,EAAUF,EAAOL,EAAUQ,aAAeL,EAG1CM,EAAOR,EAAQS,UAAYN,EAC3BO,EAAUF,EAAOR,EAAQO,aAQ7B,OALcC,GAAQJ,GAAQM,GAAWJ,GAEvCL,IACEO,EAAOJ,GAAQM,EAAUN,GACxBM,EAAUJ,GAAWE,EAAOF,GAGjC,OAAO,EA3MXK,IAAQC,WAAW,kBA+MOC,OAAOC,W,YCjNpBA,EAAaD,OAAOC,WACpBC,EAAc,CAAEC,SAAU,IAAKC,OAAQ,QCqBpD,SAASC,EAAaC,EAAOC,EAAOC,EAAQC,GAC1C,IAAMC,EAAW7B,EAAW,kBACtB8B,EAAW9B,EAAW,kBACtBS,GAAiB,EAAIqB,EAASf,UAAY,GAG1CgB,EAAe3B,EACnB0B,EACA9B,EAAW,WAAayB,IACxB,GACC,GACDhB,GAGIuB,EAAa,GACnB,IAAK,IAAMC,KAAKN,EAAQ,CACtB,IAAMO,EAAkBlC,EAAW,WAAaiC,GAShD,GARqB7B,EACnByB,EACAK,GACA,GACC,GACDzB,IAGkBsB,EAAc,CAChC,IAAMI,EAAUC,OAAOV,KAAWU,OAAOH,GACzCD,EAAWK,KAAK,CACdC,aAActC,EAAW,WAAayB,GACtCc,WAAYL,EACZM,MAAOL,EFgKU,oBADA,2BE9JjBM,UAAWN,EAAU,MAAQ,OAC7BO,YAAa,EACbC,KAAMR,EAAU,IAAM,QD3CvB,SAAmBP,EAAYI,GAAY,oBAEvBA,EAAWY,WAFY,IAEhD,2BAA+C,CAAC,IAAD,yBAAnCX,EAAmC,KAAhCY,EAAgC,KACzCC,EAAO,IAAI1B,EAAWyB,EAAMP,aAAcO,EAAMN,WAAY,CAC9DC,MAAOK,EAAML,MACbO,UAAW,OACXC,QAAS,OACTC,eAAgBJ,EAAML,MACtBU,KAAM,QACNP,KAAME,EAAMF,KACZQ,MAAM,EACNC,YAAa,SACbX,UAAWI,EAAMJ,UACjBC,YAAaG,EAAMH,cAIrBrB,EAAYC,SAAW,IACvBwB,EAAKO,KAAK,OAAQhC,GAClBO,EAAWS,KAAK,CAAES,KAAMA,EAAMQ,MAAOrB,KAnBS,+BC+ChDsB,CAAU3B,EAAYI,GAGT,SAASwB,EAAWC,GACjC,IAAMC,EAAaD,EAAMC,WACnBL,EAAOK,EAAWL,KAClBM,EAASD,EAAWC,OACpBC,EAASF,EAAWE,OACpBnC,EAAQmC,EAAOD,EAAOE,OAAOC,eAC7BnC,EAASiC,EAAOD,EAAOE,OAAOC,eAAenC,OAE7CoC,EACJJ,EAAOE,OAAOG,eAAiBrC,EAAOsC,OAClC,EACAN,EAAOE,OAAOG,cACdA,EAAgBrC,EAAOoC,GACvBnC,EAAasC,iBAAO,IACpBC,EAAcD,iBAAO,MACrBE,EAAmBF,iBAAOP,EAAOE,OAAOC,eACxCO,EAAmBH,iBAAOP,EAAOE,OAAOG,eACxCM,EAAaJ,iBAAOvC,GAE1B,SAAS4C,IACP3C,EAAW4C,QAAQC,SAAQ,SAAUC,GACnCA,EAAK5B,KAAK6B,YAEZ/C,EAAW4C,QAAU,GAGvBI,qBAAU,WACJjB,EAAOE,OAAOG,eAAiBrC,EAAOsC,QACxCN,EAAOkB,OAAOb,cAAc,KAE7B,CAACL,EAAOE,OAAOG,cAAeL,EAAOkB,OAAQlD,IAEhDiD,qBAAU,WACR,SAASE,IACP3D,OAAO4D,aAAaZ,EAAYK,SAChCL,EAAYK,QAAUQ,YAAW,WAC/BT,IACA/C,EACE4C,EAAiBI,QACjBH,EAAiBG,QACjBF,EAAWE,QACX5C,EAAW4C,WAEZ,KAEL,IAAM3C,EAAW7B,EAAW,kBACtB8B,EAAW9B,EAAW,kBAG5BmB,OAAO8D,iBAAiB,SAAUH,GAClChD,EAASmD,iBAAiB,SAAUH,GAAoB,GACxDjD,EAASoD,iBAAiB,SAAUH,GAAoB,GAExD,IAAMI,EAAmBlF,EAAW,WAAa+D,GAQjD,OANAlC,EAASsD,SAAS,CAChBC,IAAKF,EAAiBnE,UAAYc,EAASd,UAAY,GACvDsE,KAAM,EACNC,SAAU,WAGL,WACLf,IACApD,OAAOoE,oBAAoB,SAAUT,GACrChD,EAASyD,oBAAoB,SAAUT,GAAoB,GAC3DjD,EAAS0D,oBAAoB,SAAUT,GAAoB,MAE5D,IAEHF,qBAAU,WAWR,OAVAR,EAAiBI,QAAUb,EAAOE,OAAOC,cACzCO,EAAiBG,QAAUb,EAAOE,OAAOG,cACzCM,EAAWE,QAAU7C,EACrBH,EACEmC,EAAOE,OAAOC,cACdH,EAAOE,OAAOG,cACdrC,EACAC,EAAW4C,SAGN,WACLD,OAED,CACDZ,EAAOE,OAAOC,cACdH,EAAOE,OAAOG,cACdrC,EACA0B,EAAKQ,OAAO2B,iBAGd,IAAMC,EAAiB7B,EAAO8B,KAAI,SAACC,EAAOrC,GACxC,IFnI6BsC,EAAOC,EEmIhCC,EACFpC,EAAWqC,SACX,kBACAnC,EAAON,GAAO0C,KACd,IACApC,EAAON,GAAO3B,OAAOiC,EAAON,GAAO3B,OAAOsC,OAAS,GAAG+B,KACtD,SAEF,OACE,sBACE/F,GAAI,cAAgBqD,EAEpB5E,UAAU,6CAHZ,UAKE,sBAAKA,UAAU,gBAAf,UACG,KFlJsBkH,EEmJLD,EAAMK,KAAKC,cFnJCJ,EEmJc,EFlJhDD,EAAM3B,QAAU4B,EACXD,EAEMA,EAAMM,UAAU,EAAGL,GAAa,UEiJzC,sBAAKnH,UAAU,gBAAf,UACGoB,EAAa6F,EAAK,iBADrB,WACmD,OAEnD,qBACE1F,GAAI,WAAaqD,EACjB6C,QAAS,kBAAMxC,EAAOkB,OAAOf,cAAcR,IAC3CxE,IAAKgH,EACL/G,IAAI,GACJL,UACE,oBACC0D,OAAOuB,EAAOE,OAAOC,iBAAmB1B,OAAOkB,GAC5C,SACA,IAEN8C,WAAY9C,MArBTqC,EAAMK,KAAO,UAAY1C,MA2B9B+C,EAAiB1E,EAAO+D,KAAI,SAACY,EAAOhD,GACxC,IAAIwC,EACFpC,EAAWqC,SACX,kBACAtE,EAAMuE,KACN,IACArE,EAAO2B,GAAO0C,KACd,SAEF,OACE,sBAEEtH,UAAU,6CAFZ,UAIE,sBAAKA,UAAU,gBAAf,cAAiC,SAAW4H,EAAMC,YAAlD,OAEA,sBAAK7H,UAAU,gBAAf,UACG,IACAoB,EAAawG,EAAME,iBAFtB,aAIA,qBACEvG,GAAI,WAAaqD,EACjB6C,QAAS,kBAAMzC,EAAWC,OAAOkB,OAAOb,cAAcV,IACtDxE,IAAKgH,EACL/G,IAAI,GACJL,UACE,oBACC0D,OAAOuB,EAAOE,OAAOG,iBAAmB5B,OAAOkB,GAC5C,SACA,IAEN8C,WAAY9C,MApBTgD,EAAQ,UAAYhD,MA0B/B,OACE,qBAAK5E,UAAU,OAAf,SACE,sBAAKA,UAAW,KAAO2E,EAAKQ,OAAO4C,SAAW,GAAK,gBAAnD,UAEE,qBACEN,QAAS,kBACP9C,EAAKwB,OAAOW,gBAAgBnC,EAAKQ,OAAO2B,iBAE1C9G,UAAU,qEAJZ,SAME,sBAAKA,UAAU,8BAAf,UACE,mCACG,KACC2E,EAAKQ,OAAO2B,gBAAkB,2CAAwB,IACvDnC,EAAKQ,OAAO2B,gBAAkB,2CAAwB,OAC/C,IACV,4DAMF,sBACErG,MAAO,CAAEC,OAAQ,KACjBV,UACE,6BACC2E,EAAKQ,OAAO2B,eAAiB,GAAK,gBAJvC,UAOE,sBAAKrG,MAAO,CAAEC,OAAQ,KAAOV,UAAU,aAAvC,UACE,qBAAKA,UAAU,qBAAf,qBACA,qBAAKA,UAAU,iBACf,qBACEuB,GAAG,iBACHvB,UAAU,4CAFZ,SAIG+G,IAEH,sBAAK/G,UAAU,qBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,qBAAKA,UAAU,yDAAf,SACG+C,EAAMuE,KAAKC,kBAGhB,sBAAKvH,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACG,IACD,mCACG,IACAoB,EAAa2B,EAAM+E,iBAFtB,cAEmD,OACzC,OAEZ,sBAAK9H,UAAU,gBAAf,UACG,IACA+C,EAAMiF,UAFT,UAE2B,gBAKjC,sBAAKvH,MAAO,CAAEC,OAAQ,KAAOV,UAAU,cAAvC,UACE,sBAAKA,UAAU,oBAAf,UACE,qBAAKA,UAAU,SAAf,mBAEA,qBAAKA,UAAU,UAAf,SACE,cAACiI,EAAA,EAAD,CAASC,UAAU,OAAOC,YAAY,GAAtC,SACE,sBAAKnI,UAAU,SAAf,yBACe,IACb,sBAAMA,UAAU,UAAhB,iCAFF,8JAcN,qBAAKA,UAAU,iBACf,qBACEuB,GAAG,iBACHvB,UAAU,iCAFZ,SAIE,sBAAKA,UAAU,gBAAf,cAAiC2H,EAAjC,SAEF,sBAAK3H,UAAU,qBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,qBAAKA,UAAU,yDAAf,SACG,UAAYsF,EAAcuC,gBAG/B,sBAAK7H,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACG,IACD,4CAAesF,EAAc8C,KAA7B,OAFF,KAEiD,IAC/C,uBAAMpI,UAAU,YAAhB,UACG,IACAsF,EAAcgC,KAAKC,cAAe,OAC7B,OAEV,sBAAKvH,UAAU,gBAAf,UACG,IACAoB,EAAakE,EAAcwC,iBAF9B,oBAGa,gBAMnB,qBAAK9H,UAAU,yB,MC9UZ,SAASqI,EAAWtD,GACjC,IAAMC,EAAaD,EAAMC,WACnBC,EAASD,EAAWC,OACpBC,EAASF,EAAWE,OACpBnC,EAAQmC,EAAOD,EAAOE,OAAOC,eAC7BnC,EAASiC,EAAOD,EAAOE,OAAOC,eAAenC,OAE7CoC,EACJJ,EAAOE,OAAOG,eAAiBrC,EAAOsC,OAClC,EACAN,EAAOE,OAAOG,cAEdgD,EACJtD,EAAWsD,QAAQvF,EAAMuE,MAAMrE,EAAOoC,GAAoBiC,MAE5DpB,qBAAU,cAAU,IAEpB,IAAMqC,EAAkBD,EAAQtB,KAAI,SAACwB,EAAM5D,GAEzC,IAAIwC,EACFpC,EAAWqC,SACX,kBACAtE,EAAMuE,KACN,IACArE,EAAOoC,GAAoBiC,KAC3B,IACAkB,EACA,OAEF,OACE,sBAEExI,UAAU,6CAFZ,UAIE,sBAAKA,UAAU,gBAAf,cAAiC,WAAawI,EAA9C,OAEA,qBACEjH,GAAI,YAAcqD,EAClB6C,QAAS,kBAAMzC,EAAWC,OAAOkB,OAAOsC,eAAe7D,IACvDxE,IAAKgH,EACL/G,IAAI,GACJL,UACE,oBACC0D,OAAOuB,EAAOE,OAAOsD,kBAAoB/E,OAAOkB,GAC7C,SACA,IAEN8C,WAAY9C,MAhBT4D,EAAO,UAAY5D,MAsBxB8D,EACJ1D,EAAWqC,SACX,kBACAtE,EAAMuE,KACN,IACArE,EAAOoC,GAAoBiC,KAC3B,KACCgB,EAAQrD,EAAOE,OAAOsD,iBAAmB,KAC1C,OAEIE,EACJ,sBAAK3I,UAAU,6BAAf,UACE,qBACEuB,GAAI,YACJnB,IAAKsI,EACLrI,IAAI,GACJL,UAAW,gCAEb,sBAAKA,UAAU,yBAAf,UACE,sBAAKA,UAAU,8BAAf,UACG,IACD,sBAAMA,UAAU,WAAhB,SAA4B+C,EAAMuE,OAFpC,KAEmD,IAChDrE,EAAOoC,GAAoBiC,KAAM,OAEpC,sBAAKtH,UAAU,eAAf,UACG,IADH,WAEWsI,EAAQrD,EAAOE,OAAOsD,iBAAmB,EAAG,aAM7D,OACE,qCACE,sBAAKzI,UAAU,WAAf,UACG2I,EACAJ,KAEH,uBACA,uBACA,0BC5FS,SAASK,EAAS7D,GAK/B,OAJAmB,qBAAU,WACR1E,SAASqH,MAAT,iDACC,IAGD,qCACE,sBAAK7I,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,kEAAf,UACE,sBAAKA,UAAU,kCAAf,UACG,IADH,2CAE2C,OAH7C,qKAOgC,+CAPhC,eAOuE,IACrE,6CARF,2FAYF,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,kEAAf,UACE,sBAAKA,UAAU,kCAAf,UACG,IADH,6BAE6B,OAH/B,2CAK2C,IACzC,sBAAMA,UAAU,UAAhB,qBANF,0DAO+B,IAC7B,sBAAMA,UAAU,UAAhB,mCARF,aAQmE,IACjE,sBAAMA,UAAU,UAAhB,yBATF,sBASkE,IAChE,oBACEE,KAAK,kDACLS,OAAO,SACPmI,IAAI,sBAHN,UAKG,IALH,kBAOK,IAjBP,2FAwBJ,cAAChE,EAAD,CAAYE,WAAYD,EAAMC,aAC9B,cAACqD,EAAD,CAAYrD,WAAYD,EAAMC,gB,YCpC9B+D,EAAUC,YAAqB,CACnCC,SAAU,GACVC,cAAc,EACdC,UAAW,EAEXC,oBAAqB,SAACC,EAASC,GAAV,OAAuBA,EAAS7G,OAAO8G,QAAQF,OAGtEN,EAAQS,QAAO,SAACC,OAIhB,IAAIC,EAAa,GAEjB,SAASC,EAASF,GACZA,EAASG,QAAQF,EACnBA,EAAWD,EAASG,MAAQF,EAAWD,EAASG,MAAQ,EAExDF,EAAWD,EAASG,MAAQ,EAQjB,SAASC,IACtB,IAAMC,EAAeC,EAAQ,IACvBC,EAAgBD,EAAQ,IAFD,EAKaE,mBAAS,GALtB,mBAKtB7E,EALsB,KAKP8E,EALO,OAMaD,mBAAS,IANtB,mBAMtB3E,EANsB,KAMP6E,EANO,OAOeF,mBAAS,GAPxB,mBAOtBxB,EAPsB,KAON2B,EAPM,OAQWH,oBAAS,GARpB,mBAQtBI,EARsB,KAQRC,EARQ,OASaL,oBAAS,GATtB,mBAStBM,EATsB,KASPC,EATO,OAUeP,oBAAS,GAVxB,mBAUtBnD,EAVsB,KAUN2D,EAVM,KAY7BvE,qBAAU,WACR1E,SAASqH,MAAT,sCACAc,EAASlH,OAAOgH,YACf,IAEH,IAAMzE,EAAa,CACjBqC,SAAUlH,gBACVwE,KAAM,CACJQ,OAAQ,CACNoF,cAAeA,EACfxC,SAAUsC,EACVvD,eAAgBA,GAElBX,OAAQ,CACNoE,cAAeC,EACf1D,eAAgB2D,EAChB1C,SAAUuC,IAGdrF,OAAQ,CACNE,OAAQ,CACNC,cAAeA,EACfE,cAAeA,EACfmD,eAAgBA,GAElBtC,OAAQ,CACNf,cAAe8E,EACf5E,cAAe6E,EACf1B,eAAgB2B,IAGpBlF,OAAQ4E,EAAY,OACpBxB,QAAS0B,GAGX,OACE,eAAC,IAAD,WACE,gCACE,cAACjK,EAAD,IACA,sBAAMC,UAAU,sBAAhB,SACE,cAAC,IAAD,CACEM,OAAK,EACLkE,KAAK,IACLkG,OAAQ,SAAC3F,GAAD,OAAW,cAAC6D,EAAD,2BAAc7D,GAAd,IAAqBC,WAAYA,aAK1D,qBAAKzD,GAAG,SAAR,SACE,cAAC,EAAD,SAjERwH,EAAQS,QAAO,SAACC,GACdE,EAASF,MC3BSkB,QACW,cAA7BlI,OAAOgH,SAASmB,UAEe,UAA7BnI,OAAOgH,SAASmB,UAEhBnI,OAAOgH,SAASmB,SAASC,MACvB,2DCXNC,IAASJ,OAAO,cAAC,EAAD,IAASlJ,SAASC,eAAe,SD4H3C,kBAAmBsJ,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,c","file":"static/js/main.cebb7adf.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2019 Fast Forward Labs.\n * Written by / Contact : https://github.com/victordibia\n * NeuralQA - NeuralQA: Question Answering on Large Datasets with BERT.\n * Licensed under the MIT License (the \"License\");\n * =============================================================================\n */\n\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./header.css\";\n\nexport default function Header() {\n  const appName = \"Neural Dreams\";\n  const appDescription = \"Neural Dreams\";\n  return (\n    <div>\n      <div className=\"headermain\" aria-label={appDescription}>\n        <div className=\"container-fluid w100 headerrow pl10 \">\n          <div className=\"flex    h100\">\n            <div className=\"h100   flex flexjustifycenter mr10  \">\n              <a href={process.env.PUBLIC_URL + \"/#\"}>\n                <img\n                  className=\"headericon\"\n                  src=\"images/icon.png\"\n                  alt=\"NeuralQA logo\"\n                />\n              </a>\n            </div>\n            <div className=\"h100 apptitle  flex flexjustifycenter  mr10\">\n              <div className=\"whitetext boldtext  iblock mr10\"> {appName} </div>\n            </div>\n            <div className=\"h100   flex flexjustifycenter  navbarlinks \">\n              <NavLink exact to=\"/\">\n                Model Visualization\n              </NavLink>\n            </div>\n            {/* <div className=\"h100   flex flexjustifycenter  navbarlinks \">\n              <NavLink exact to=\"/embeddings\">\n                Embeddings{\" \"}\n              </NavLink>\n            </div>\n            <div className=\"h100   flex flexjustifycenter  navbarlinks \">\n              <NavLink exact to=\"/livesearch\">\n                Live Search{\" \"}\n              </NavLink>\n            </div> */}\n          </div>\n        </div>\n      </div>\n      <div></div>\n      <div className=\"headerboost\"> </div>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright 2019 Fast Forward Labs.\n * Written by Victor Dibia / Contact : https://github.com/victordibia\n * CaseQA - CaseQA: Question Answering on Large Datasets with BERT.\n * Licensed under the MIT License (the \"License\");\n * =============================================================================\n */\n\nimport React, { Component } from \"react\";\nimport \"./footer.css\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div style={{ zIndex: 999000 }} className=\"centerpage pl10\">\n        Made with <span className=\"redcolor\">&#9829;</span> at{\" \"}\n        <a href=\"http://experiments.fastforwardlabs.com/\" target=\"blank\">\n          Cloudera Fast Forward Labs\n        </a>\n        .\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import ReactGA from \"react-ga\";\nimport { shuffle } from \"lodash\";\nReactGA.initialize(\"UA-53030428-17\");\n\nexport function registerGAEvent(\n  componentName,\n  eventCategory,\n  eventAction,\n  componentLoadTime\n) {\n  let eventTime = new Date().getTime() - componentLoadTime;\n  if (window.location.hostname !== \"localhost\") {\n    console.log(\"GA\", eventCategory, eventTime, eventAction, componentName);\n    ReactGA.event({\n      category: eventCategory,\n      action: eventAction,\n      value: eventTime,\n      label: componentName,\n    });\n  }\n}\n\nexport function abbreviateString(value, maxLength) {\n  if (value.length <= maxLength) {\n    return value;\n  } else {\n    let retval = value.substring(0, maxLength) + \" ..\";\n    return retval;\n  }\n}\n\nexport function boundWidth(widthVal) {\n  if (widthVal < 0) {\n    return 0;\n  } else if (widthVal > 1) {\n    return 1;\n  } else {\n    return widthVal;\n  }\n}\n\nfunction intlFormat(num) {\n  return new Intl.NumberFormat().format(Math.round(num * 10) / 10);\n}\nexport function makeFriendly(num) {\n  if (num < 1 && num > 0) {\n    return num;\n  }\n  if (Math.abs(num) >= 1000000) return intlFormat(num / 1000000) + \"M\";\n  if (Math.abs(num) >= 1000) return intlFormat(num / 1000) + \"k\";\n  return intlFormat(num);\n}\n\nexport function loadJSONData(url) {\n  return fetch(url)\n    .then(function (response) {\n      if (response.status !== 200) {\n        console.log(\n          \"Looks like there was a problem. Status Code: \" + response.status\n        );\n        return;\n      }\n      // Examine the text in the response\n      //    response.text().then(function(data){\n      //        console.log(data)\n      //    })\n      return response.json().then(function (data) {\n        return data;\n      });\n    })\n    .catch(function (err) {\n      console.log(\"Fetch Error :-S\", err);\n    });\n}\n\nexport function postJSONData(url, postData) {\n  return fetch(url, {\n    method: \"post\",\n    body: JSON.stringify(postData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  })\n    .then(function (response) {\n      if (response.status !== 200) {\n        console.log(\n          \"Looks like there was a problem. Status Code: \" + response.status\n        );\n        return Promise.reject(response.status);\n      }\n      return response.json().then(function (data) {\n        return data;\n      });\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\n\nexport function uploadFile(url, postData) {\n  return fetch(url, {\n    method: \"post\",\n    body: postData,\n  })\n    .then(function (response) {\n      if (response.status !== 200) {\n        console.log(\n          \"Looks like there was a problem. Status Code: \" + response.status\n        );\n        return Promise.reject(response.status);\n      }\n      return response.json().then(function (data) {\n        return data;\n      });\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\n\nexport function getFileFromUrl(url, defaultType = \"image/jpeg\") {\n  return fetch(url, {})\n    .then(function (response) {\n      if (response.status !== 200) {\n        console.log(\n          \"Looks like there was a problem. Status Code: \" + response.status\n        );\n        return Promise.reject(response.status);\n      }\n      return response.blob().then(function (data) {\n        return new File(\n          [data],\n          \"File : \" + response.headers.get(\"content-type\"),\n          {\n            type: response.headers.get(\"content-type\") || defaultType,\n          }\n        );\n      });\n    })\n    .catch(function (err) {\n      return Promise.reject(err);\n    });\n}\n\nexport function getElement(id) {\n  return document.getElementById(id);\n}\n\nexport function ColorArray() {\n  let colorArray = [\n    \"#1f78b4\",\n    \"#b2df8a\",\n    \"#33a02c\",\n    \"#fb9a99\",\n    \"#e31a1c\",\n    \"#fdbf6f\",\n    \"#ff7f00\",\n    \"#6a3d9a\",\n    \"#cab2d6\",\n    \"#ffff99\",\n    \"#8fff4f\",\n  ];\n  return colorArray;\n}\n\nexport function ColorArrayRGB() {\n  let colorArray = [\n    [141, 211, 199],\n    [255, 255, 179],\n    [190, 186, 218],\n    [251, 128, 114],\n    [128, 177, 211],\n    [253, 180, 98],\n    [179, 222, 105],\n    [252, 205, 229],\n    [188, 128, 189],\n    [204, 235, 197],\n  ];\n  return colorArray;\n}\n\nexport function checkInView(\n  container,\n  element,\n  partial,\n  containerOffset,\n  elementOffset\n) {\n  if (container) {\n    //Get container properties\n    let cTop = container.scrollTop;\n    let cBottom = cTop + container.clientHeight + containerOffset;\n\n    //Get element properties\n    let eTop = element.offsetTop + elementOffset;\n    let eBottom = eTop + element.clientHeight;\n\n    //Check if in view\n    let isTotal = eTop >= cTop && eBottom <= cBottom;\n    let isPartial =\n      partial &&\n      ((eTop < cTop && eBottom > cTop) ||\n        (eBottom > cBottom && eTop < cBottom));\n    return isTotal || isPartial;\n  } else {\n    return false;\n  }\n}\n\nexport const LeaderLine = window.LeaderLine;\nexport const animOptions = { duration: 800, timing: \"ease\" };\nexport const greyColor = \"rgba(189, 195, 199, 0.5)\";\nexport const blueColor = \"rgba(0,98,255, 1)\";\n\nexport function shuffleData(data, info) {\n  let datasetContent = [];\n  const imageBasePath = process.env.PUBLIC_URL + \"/assets/semsearch/datasets/\";\n\n  for (const row of Object.keys(data)) {\n    for (const i of data[row]) {\n      const imagePath = imageBasePath + info.name + \"/\" + i + \".jpg\";\n      datasetContent.push({ path: imagePath, index: i });\n    }\n  }\n  return shuffle(datasetContent);\n}\n","export const LeaderLine = window.LeaderLine;\nexport const animOptions = { duration: 800, timing: \"ease\" };\nexport const greyColor = \"rgba(189, 195, 199, 0.5)\";\nexport const blueColor = \"rgba(0,98,255, 1)\";\n\nexport function removeLines(lineHolder) {\n  lineHolder.forEach(function (each) {\n    each.line.remove();\n  });\n  lineHolder = [];\n}\n\nexport function drawLines(lineHolder, lineParams) {\n  // removeLines(lineHolder);\n  for (const [i, param] of lineParams.entries()) {\n    let line = new LeaderLine(param.startElement, param.endElement, {\n      color: param.color,\n      startPlug: \"disc\",\n      endPlug: \"disc\",\n      startPlugColor: param.color,\n      path: \"fluid\",\n      size: param.size,\n      hide: true,\n      startSocket: \"bottom\",\n      endSocket: param.endSocket,\n      endPlugSize: param.endPlugSize,\n      //   startPlugSize: param.startPlugSize,\n    });\n\n    animOptions.duration = 800;\n    line.show(\"draw\", animOptions);\n    lineHolder.push({ line: line, index: i });\n  }\n  // document.querySelector(\".leader-line\").style.zIndex = -100;\n}\n","/**\n * @license\n * Copyright 2019 Fast Forward Labs.\n * Written by / Contact : https://github.com/victordibia\n * NeuralQA - NeuralQA: Question Answering on Large Datasets with BERT.\n * Licensed under the MIT License (the \"License\");\n * =============================================================================\n */\n\nimport React, { useEffect, useRef } from \"react\";\nimport \"./configview.css\";\nimport {\n  abbreviateString,\n  makeFriendly,\n  getElement,\n  blueColor,\n  greyColor,\n  checkInView,\n} from \"../../helperfunctions/HelperFunctions\";\nimport { Tooltip } from \"carbon-components-react\";\nimport { drawLines } from \"../../helperfunctions/DrawLine\";\n\nfunction drawArcLines(model, layer, layers, lineHolder) {\n  const layerBox = getElement(\"layerscrollbox\");\n  const modelBox = getElement(\"modelscrollbox\");\n  const elementOffset = -1 * modelBox.offsetTop - 30;\n\n  // only draw lines if the model and the layer are visible\n  const modelVisible = checkInView(\n    modelBox,\n    getElement(\"modelimg\" + model),\n    true,\n    -80,\n    elementOffset\n  );\n\n  const lineParams = [];\n  for (const i in layers) {\n    const currentLayerBox = getElement(\"layerimg\" + i);\n    const layerVisible = checkInView(\n      layerBox,\n      currentLayerBox,\n      true,\n      -80,\n      elementOffset\n    );\n\n    if (layerVisible && modelVisible) {\n      const isPrima = String(layer) === String(i);\n      lineParams.push({\n        startElement: getElement(\"modelimg\" + model),\n        endElement: currentLayerBox,\n        color: isPrima ? blueColor : greyColor,\n        endSocket: isPrima ? \"top\" : \"left\",\n        endPlugSize: 2,\n        size: isPrima ? 2.5 : 1.5,\n      });\n    }\n  }\n  drawLines(lineHolder, lineParams);\n}\n\nexport default function ConfigView(props) {\n  const selections = props.selections;\n  const show = selections.show;\n  const config = selections.config;\n  const models = selections.models;\n  const model = models[config.getter.selectedModel];\n  const layers = models[config.getter.selectedModel].layers;\n\n  const selectedLayerIndex =\n    config.getter.selectedLayer >= layers.length\n      ? 0\n      : config.getter.selectedLayer;\n  const selectedLayer = layers[selectedLayerIndex];\n  const lineHolder = useRef([]);\n  const isScrolling = useRef(null);\n  const selectedModelRef = useRef(config.getter.selectedModel);\n  const selectedLayerRef = useRef(config.getter.selectedLayer);\n  const laysersRef = useRef(layers);\n\n  function removeLines() {\n    lineHolder.current.forEach(function (each) {\n      each.line.remove();\n    });\n    lineHolder.current = [];\n  }\n\n  useEffect(() => {\n    if (config.getter.selectedLayer >= layers.length) {\n      config.setter.selectedLayer(0);\n    }\n  }, [config.getter.selectedLayer, config.setter, layers]);\n\n  useEffect(() => {\n    function scrollEndedHandler() {\n      window.clearTimeout(isScrolling.current);\n      isScrolling.current = setTimeout(function () {\n        removeLines();\n        drawArcLines(\n          selectedModelRef.current,\n          selectedLayerRef.current,\n          laysersRef.current,\n          lineHolder.current\n        );\n      }, 200);\n    }\n    const layerBox = getElement(\"layerscrollbox\");\n    const modelBox = getElement(\"modelscrollbox\");\n\n    // console.log(\"adding listeners\");\n    window.addEventListener(\"resize\", scrollEndedHandler);\n    modelBox.addEventListener(\"scroll\", scrollEndedHandler, false);\n    layerBox.addEventListener(\"scroll\", scrollEndedHandler, false);\n\n    const selectedLayerBox = getElement(\"layerimg\" + selectedLayerIndex);\n\n    layerBox.scrollTo({\n      top: selectedLayerBox.offsetTop - layerBox.offsetTop - 30,\n      left: 0,\n      behavior: \"smooth\",\n    });\n\n    return function cleanup() {\n      removeLines();\n      window.removeEventListener(\"resize\", scrollEndedHandler);\n      modelBox.removeEventListener(\"scroll\", scrollEndedHandler, false);\n      layerBox.removeEventListener(\"scroll\", scrollEndedHandler, false);\n    };\n  }, []);\n\n  useEffect(() => {\n    selectedModelRef.current = config.getter.selectedModel;\n    selectedLayerRef.current = config.getter.selectedLayer;\n    laysersRef.current = layers;\n    drawArcLines(\n      config.getter.selectedModel,\n      config.getter.selectedLayer,\n      layers,\n      lineHolder.current\n    );\n\n    return function cleanup() {\n      removeLines();\n    };\n  }, [\n    config.getter.selectedModel,\n    config.getter.selectedLayer,\n    layers,\n    show.getter.advancedDrawer,\n  ]);\n\n  const modelImageList = models.map((mdata, index) => {\n    let imagePath =\n      selections.basePath +\n      \"/assets/models/\" +\n      models[index].name +\n      \"/\" +\n      models[index].layers[models[index].layers.length - 1].name +\n      \"/0.jpg\";\n\n    return (\n      <div\n        id={\"modelimgbox\" + index}\n        key={mdata.name + \"fullbox\" + index}\n        className=\"iblock datasetfullbox mr10 clickable mb10 \"\n      >\n        <div className=\"datasettitles\">\n          {\" \"}\n          {abbreviateString(mdata.name.toUpperCase(), 9)}\n        </div>\n        <div className=\"smalldesc pb5\">\n          {makeFriendly(mdata[\"modelparameters\"])} params.{\" \"}\n        </div>\n        <img\n          id={\"modelimg\" + index}\n          onClick={() => config.setter.selectedModel(index)}\n          src={imagePath}\n          alt=\"\"\n          className={\n            \"datasetbox rad2 \" +\n            (String(config.getter.selectedModel) === String(index)\n              ? \"active\"\n              : \"\")\n          }\n          indexvalue={index}\n        />\n      </div>\n    );\n  });\n\n  const layerImageList = layers.map((ldata, index) => {\n    let imagePath =\n      selections.basePath +\n      \"/assets/models/\" +\n      model.name +\n      \"/\" +\n      layers[index].name +\n      \"/0.jpg\";\n\n    return (\n      <div\n        key={ldata + \"fullbox\" + index}\n        className=\"iblock datasetfullbox mr10 clickable mb10 \"\n      >\n        <div className=\"datasettitles\"> {\"layer \" + ldata.layer_index} </div>\n        {/* {abbreviateString(ldata.name, 11).toLowerCase()}  */}\n        <div className=\"smalldesc pb5\">\n          {\" \"}\n          {makeFriendly(ldata.modelparameters)} params\n        </div>\n        <img\n          id={\"layerimg\" + index}\n          onClick={() => selections.config.setter.selectedLayer(index)}\n          src={imagePath}\n          alt=\"\"\n          className={\n            \"datasetbox rad2 \" +\n            (String(config.getter.selectedLayer) === String(index)\n              ? \"active\"\n              : \"\")\n          }\n          indexvalue={index}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"mt10\">\n      <div className={\" \" + (show.getter.advanced ? \"\" : \" displaynone\")}>\n        {/* config panel and content */}\n        <div\n          onClick={() =>\n            show.setter.advancedDrawer(!show.getter.advancedDrawer)\n          }\n          className=\"unselectable mt10 p10 clickable darkborderbottom flex greymoreinfo\"\n        >\n          <div className=\"iblock flexfull minwidth485\">\n            <strong>\n              {\" \"}\n              {!show.getter.advancedDrawer && <span>&#x25BC; </span>}{\" \"}\n              {show.getter.advancedDrawer && <span>&#x25B2; </span>}{\" \"}\n            </strong>{\" \"}\n            <strong> Advanced Options</strong>\n          </div>\n        </div>\n\n        {/* Configuration drawer */}\n        {\n          <div\n            style={{ zIndex: 500 }}\n            className={\n              \"flex  modelconfigdiv p10 \" +\n              (show.getter.advancedDrawer ? \"\" : \" displaynone\")\n            }\n          >\n            <div style={{ zIndex: 100 }} className=\"mr10 flex4\">\n              <div className=\" pb10 sectiontitle\"> Model </div>\n              <div className=\"horrule mb10\"></div>\n              <div\n                id=\"modelscrollbox\"\n                className=\"datasetselectdiv scrollwindow layerwindow\"\n              >\n                {modelImageList}\n              </div>\n              <div className=\"flex flexwrap pr10\">\n                <div className=\"  mr10 \">\n                  <div className=\" iblock boldtext datasetdescription  p10 greyhighlight\">\n                    {model.name.toUpperCase()}\n                  </div>\n                </div>\n                <div className=\"flexfull \">\n                  <div className=\"smalldesc pt4\">\n                    {\" \"}\n                    <strong>\n                      {\" \"}\n                      {makeFriendly(model.modelparameters)} Parameters{\" \"}\n                    </strong>{\" \"}\n                  </div>\n                  <div className=\"smalldesc pt3\">\n                    {\" \"}\n                    {model.numlayers} layers{\" \"}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div style={{ zIndex: 100 }} className=\"flex6 pr10 \">\n              <div className=\"pb8 sectiontitle \">\n                <div className=\"iblock\">Layer</div>\n\n                <div className=\"iblock \">\n                  <Tooltip direction=\"left\" triggerText=\"\">\n                    <div className=\"wscore\">\n                      We construct{\" \"}\n                      <span className=\"italics\">intermediate models</span> from\n                      the main model at each of these layers. Each intermediate\n                      model has less parameters than the full model and is used\n                      for feature extraction.\n                      {/* <div class=\"bx--tooltip__footer\">\n                                                <a hid=\"#\" class=\"bx--link\">Learn More</a>\n                                                <button onClick={this.toggleSemanticModal.bind(this)} class=\"bx--btn bx--btn--primary bx--btn--sm\" type=\"button\">More Info</button>\n                                            </div> */}\n                    </div>\n                  </Tooltip>\n                </div>\n              </div>\n              <div className=\"horrule mb10\"></div>\n              <div\n                id=\"layerscrollbox\"\n                className=\"scrollwindow layerwindow  mr10\"\n              >\n                <div className=\"windowcontent\"> {layerImageList} </div>\n              </div>\n              <div className=\"flex flexwrap pr10\">\n                <div className=\"  mr10 \">\n                  <div className=\" iblock boldtext datasetdescription  p10 greyhighlight\">\n                    {\" LAYER \" + selectedLayer.layer_index}\n                  </div>\n                </div>\n                <div className=\"flexfull \">\n                  <div className=\"smalldesc pt4\">\n                    {\" \"}\n                    <strong>Type: {selectedLayer.type} </strong> |{\" \"}\n                    <span className=\"smalldesc\">\n                      {\" \"}\n                      {selectedLayer.name.toUpperCase()}{\" \"}\n                    </span>{\" \"}\n                  </div>\n                  <div className=\"smalldesc pt3\">\n                    {\" \"}\n                    {makeFriendly(selectedLayer.modelparameters)} model\n                    parameters{\" \"}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"horrule mb10\"></div>\n          </div>\n        }\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useEffect } from \"react\";\nimport \"./neuronview.css\";\n\nexport default function NeuronView(props) {\n  const selections = props.selections;\n  const config = selections.config;\n  const models = selections.models;\n  const model = models[config.getter.selectedModel];\n  const layers = models[config.getter.selectedModel].layers;\n\n  const selectedLayerIndex =\n    config.getter.selectedLayer >= layers.length\n      ? 0\n      : config.getter.selectedLayer;\n\n  const neurons =\n    selections.neurons[model.name][layers[selectedLayerIndex].name];\n\n  useEffect(() => {}, []);\n\n  const neuronImagelIst = neurons.map((data, index) => {\n    // https://convnetplayground.fastforwardlabs.com/assets/models/mobilenetv2/Conv1/1.jpg\n    let imagePath =\n      selections.basePath +\n      \"/assets/models/\" +\n      model.name +\n      \"/\" +\n      layers[selectedLayerIndex].name +\n      \"/\" +\n      data +\n      \".jpg\";\n\n    return (\n      <div\n        key={data + \"fullbox\" + index}\n        className=\"iblock datasetfullbox mr10 clickable mb10 \"\n      >\n        <div className=\"smalldesc pb5\"> {\"Channel \" + data} </div>\n\n        <img\n          id={\"neuronimg\" + index}\n          onClick={() => selections.config.setter.selectedNeuron(index)}\n          src={imagePath}\n          alt=\"\"\n          className={\n            \"datasetbox rad2 \" +\n            (String(config.getter.selectedNeuron) === String(index)\n              ? \"active\"\n              : \"\")\n          }\n          indexvalue={index}\n        />\n      </div>\n    );\n  });\n\n  const mainImagePath =\n    selections.basePath +\n    \"/assets/models/\" +\n    model.name +\n    \"/\" +\n    layers[selectedLayerIndex].name +\n    \"/\" +\n    (neurons[config.getter.selectedNeuron] || \"0\") +\n    \".jpg\";\n\n  const mainImage = (\n    <div className=\"mr10 mb5  floatleft iblock\">\n      <img\n        id={\"mainimage\"}\n        src={mainImagePath}\n        alt=\"\"\n        className={\"datasetbox rad2 mainneuron \"}\n      />\n      <div className=\"greyhighlight mt5 p10 \">\n        <div className=\"smalldesc underline mb3 pb5\">\n          {\" \"}\n          <span className=\"boldtext\">{model.name}</span> |{\" \"}\n          {layers[selectedLayerIndex].name}{\" \"}\n        </div>\n        <div className=\"boldtext pt5\">\n          {\" \"}\n          Channel {neurons[config.getter.selectedNeuron] || 0}{\" \"}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      <div className=\"p10 mt10\">\n        {mainImage}\n        {neuronImagelIst}\n      </div>\n      <br />\n      <br />\n      <br />\n    </>\n  );\n}\n","import React from \"react\";\nimport { useEffect } from \"react\";\nimport ConfigView from \"./configview/ConfigView\";\nimport NeuronView from \"./neuronview/NeuronView\";\n\nexport default function ModelViz(props) {\n  useEffect(() => {\n    document.title = `Neural Dreams | Layer / Neuron Visualization`;\n  }, []);\n\n  return (\n    <>\n      <div className=\"flex pb10\">\n        <div className=\"flex5 mr10\">\n          <div className=\"  mynotif positionrelative h100 lh10 p10 lightbluehightlight   \">\n            <div className=\"boldtext pb5 advancedoptionsbox\">\n              {\" \"}\n              Optimization Based Feature Visualization{\" \"}\n            </div>\n            This demo allows you to explore visualizations of patterns learned\n            by channels (groups of neurons) in each layer of a Convolutional\n            Neural Network (pretrained on <strong> imagenet</strong>). To begin,{\" \"}\n            <strong> click </strong> on a model, and a layer to view\n            visualizations of selected channels in that layer.\n          </div>\n        </div>\n        <div className=\"flex5\">\n          <div className=\"  mynotif positionrelative h100 lh10 p10 lightbluehightlight   \">\n            <div className=\"boldtext pb5 advancedoptionsbox\">\n              {\" \"}\n              What do these images mean?{\" \"}\n            </div>\n            These images/visualizations represent an{\" \"}\n            <span className=\"italics\">example</span> of what the given neurons\n            in the pretrained model have{\" \"}\n            <span className=\"italics\"> learned to look for </span>. They are{\" \"}\n            <span className=\"italics\"> generated </span> using an iterative{\" \"}\n            <a\n              href=\"https://distill.pub/2017/feature-visualization/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {\" \"}\n              optimization\n            </a>{\" \"}\n            process which synthesizes input that causes the neurons to have high\n            activation.\n          </div>\n        </div>\n      </div>\n\n      <ConfigView selections={props.selections}></ConfigView>\n      <NeuronView selections={props.selections} />\n    </>\n  );\n}\n","/**\n * @license\n * Copyright 2019 Fast Forward Labs.\n * Written by Victor Dibia / Contact : https://github.com/victordibia\n * CaseQA - CaseQA: Question Answering on Large Datasets with BERT.\n * Licensed under the MIT License (the \"License\");\n * =============================================================================\n */\n\nimport React, { useEffect, useState } from \"react\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport Header from \"./header/Header\";\nimport Footer from \"./footer/Footer\";\nimport ModelViz from \"./modelvizview/ModelViz\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory({\n  basename: \"\", // The base URL of the app (see below)\n  forceRefresh: false, // Set true to force full page refreshes\n  keyLength: 6, // The length of location.key\n  // A function to use to confirm navigation with the user (see below)\n  getUserConfirmation: (message, callback) => callback(window.confirm(message)),\n});\n\nhistory.listen((location) => {\n  // console.log(location.pathname, location.hash)\n});\n\nlet linkHolder = {};\n\nfunction updateLh(location) {\n  if (location.hash in linkHolder) {\n    linkHolder[location.hash] = linkHolder[location.hash] + 1;\n  } else {\n    linkHolder[location.hash] = 0;\n  }\n}\n\nhistory.listen((location) => {\n  updateLh(location);\n});\n\nexport default function Main() {\n  const modelDetails = require(\"../assets/modelviz/model_details.json\");\n  const neuronDetails = require(\"../assets/modelviz/neurons.json\");\n\n  //   specify state values and setters\n  const [selectedModel, setSelectedModel] = useState(4);\n  const [selectedLayer, setSelectedLayer] = useState(71);\n  const [selectedNeuron, setSelectedNeuron] = useState(5);\n  const [showAdvanced, setShowAdvanced] = useState(true);\n  const [similarDrawer, setSimilarDrawer] = useState(true);\n  const [advancedDrawer, setAdvancedDrawer] = useState(true);\n\n  useEffect(() => {\n    document.title = `Neural Dreams | Model Visualization`;\n    updateLh(window.location);\n  }, []);\n\n  const selections = {\n    basePath: process.env.PUBLIC_URL,\n    show: {\n      getter: {\n        similarDrawer: similarDrawer,\n        advanced: showAdvanced,\n        advancedDrawer: advancedDrawer,\n      },\n      setter: {\n        similarDrawer: setSimilarDrawer,\n        advancedDrawer: setAdvancedDrawer,\n        advanced: setShowAdvanced,\n      },\n    },\n    config: {\n      getter: {\n        selectedModel: selectedModel,\n        selectedLayer: selectedLayer,\n        selectedNeuron: selectedNeuron,\n      },\n      setter: {\n        selectedModel: setSelectedModel,\n        selectedLayer: setSelectedLayer,\n        selectedNeuron: setSelectedNeuron,\n      },\n    },\n    models: modelDetails[\"models\"],\n    neurons: neuronDetails,\n  };\n\n  return (\n    <HashRouter>\n      <div>\n        <Header></Header>\n        <main className=\"container-fluid p10\">\n          <Route\n            exact\n            path=\"/\"\n            render={(props) => <ModelViz {...props} selections={selections} />}\n          />\n        </main>\n      </div>\n\n      <div id=\"footer\">\n        <Footer />\n      </div>\n    </HashRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./components/template.scss\";\nimport \"./components/template.css\";\nimport App from \"./components/Main\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}